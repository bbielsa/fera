Created by PLY (http://www.dabeaz.com/ply)

Grammar

Rule 0     S' -> program
Rule 1     program -> data_block
Rule 2     program -> data_block code_block_region entry_block
Rule 3     program -> empty
Rule 4     empty -> <empty>
Rule 5     code_block_region -> proc_block code_block_region
Rule 6     code_block_region -> inline_block code_block_region
Rule 7     code_block_region -> empty
Rule 8     proc_block -> KWPROC LBRACKET RBRACKET
Rule 9     inline_block -> KWINLINE DIDENT LBRACKET inline_region RBRACKET
Rule 10    entry_block -> KWENTRY LBRACKET RBRACKET
Rule 11    data_block -> KWDATA LBRACKET init_region RBRACKET
Rule 12    inline_region -> inline_stmt inline_region
Rule 13    inline_region -> empty
Rule 14    command_statement -> PLUS
Rule 15    command_statement -> MINUS
Rule 16    command_statement -> RSQBRACKET
Rule 17    command_statement -> LSQBRACKET
Rule 18    command_statement -> RPTBRACKET
Rule 19    command_statement -> LPTBRACKET
Rule 20    command_statement -> POINT
Rule 21    command_statement -> COMMA
Rule 22    inline_stmt -> command_statement
Rule 23    inline_stmt -> directive_stmt
Rule 24    directive_args_list -> IIDENT
Rule 25    directive_args_list -> IIDENT COMMA directive_args_list
Rule 26    directive_args_list -> empty
Rule 27    directive_args -> LPAREN directive_args_list RPAREN
Rule 28    directive_stmt -> DIDENT directive_args
Rule 29    init_region -> init_stmt init_region
Rule 30    init_region -> empty
Rule 31    init_stmt -> IDENT COLON TYPE SEMICOLON
Rule 32    init_stmt -> IDENT COLON TYPE ASSIGN LITERAL SEMICOLON

Terminals, with rules where they appear

ASSIGN               : 32
COLON                : 31 32
COMMA                : 21 25
DIDENT               : 9 28
IDENT                : 31 32
IIDENT               : 24 25
KWDATA               : 11
KWENTRY              : 10
KWINLINE             : 9
KWPROC               : 8
LBRACKET             : 8 9 10 11
LITERAL              : 32
LPAREN               : 27
LPTBRACKET           : 19
LSQBRACKET           : 17
MINUS                : 15
PLUS                 : 14
POINT                : 20
RBRACKET             : 8 9 10 11
RPAREN               : 27
RPTBRACKET           : 18
RSQBRACKET           : 16
SEMICOLON            : 31 32
TYPE                 : 31 32
error                : 

Nonterminals, with rules where they appear

code_block_region    : 2 5 6
command_statement    : 22
data_block           : 1 2
directive_args       : 28
directive_args_list  : 25 27
directive_stmt       : 23
empty                : 3 7 13 26 30
entry_block          : 2
init_region          : 11 29
init_stmt            : 29
inline_block         : 6
inline_region        : 9 12
inline_stmt          : 12
proc_block           : 5
program              : 0


state 0

    (0) S' -> . program
    (1) program -> . data_block
    (2) program -> . data_block code_block_region entry_block
    (3) program -> . empty
    (11) data_block -> . KWDATA LBRACKET init_region RBRACKET
    (4) empty -> .

    KWDATA          shift and go to state 4
    $end            reduce using rule 4 (empty -> .)

    program                        shift and go to state 1
    data_block                     shift and go to state 2
    empty                          shift and go to state 3

state 1

    (0) S' -> program .



state 2

    (1) program -> data_block .
    (2) program -> data_block . code_block_region entry_block
    (5) code_block_region -> . proc_block code_block_region
    (6) code_block_region -> . inline_block code_block_region
    (7) code_block_region -> . empty
    (8) proc_block -> . KWPROC LBRACKET RBRACKET
    (9) inline_block -> . KWINLINE DIDENT LBRACKET inline_region RBRACKET
    (4) empty -> .

    $end            reduce using rule 1 (program -> data_block .)
    KWPROC          shift and go to state 9
    KWINLINE        shift and go to state 10
    KWENTRY         reduce using rule 4 (empty -> .)

    code_block_region              shift and go to state 5
    proc_block                     shift and go to state 6
    inline_block                   shift and go to state 7
    empty                          shift and go to state 8

state 3

    (3) program -> empty .

    $end            reduce using rule 3 (program -> empty .)


state 4

    (11) data_block -> KWDATA . LBRACKET init_region RBRACKET

    LBRACKET        shift and go to state 11


state 5

    (2) program -> data_block code_block_region . entry_block
    (10) entry_block -> . KWENTRY LBRACKET RBRACKET

    KWENTRY         shift and go to state 13

    entry_block                    shift and go to state 12

state 6

    (5) code_block_region -> proc_block . code_block_region
    (5) code_block_region -> . proc_block code_block_region
    (6) code_block_region -> . inline_block code_block_region
    (7) code_block_region -> . empty
    (8) proc_block -> . KWPROC LBRACKET RBRACKET
    (9) inline_block -> . KWINLINE DIDENT LBRACKET inline_region RBRACKET
    (4) empty -> .

    KWPROC          shift and go to state 9
    KWINLINE        shift and go to state 10
    KWENTRY         reduce using rule 4 (empty -> .)

    proc_block                     shift and go to state 6
    code_block_region              shift and go to state 14
    inline_block                   shift and go to state 7
    empty                          shift and go to state 8

state 7

    (6) code_block_region -> inline_block . code_block_region
    (5) code_block_region -> . proc_block code_block_region
    (6) code_block_region -> . inline_block code_block_region
    (7) code_block_region -> . empty
    (8) proc_block -> . KWPROC LBRACKET RBRACKET
    (9) inline_block -> . KWINLINE DIDENT LBRACKET inline_region RBRACKET
    (4) empty -> .

    KWPROC          shift and go to state 9
    KWINLINE        shift and go to state 10
    KWENTRY         reduce using rule 4 (empty -> .)

    inline_block                   shift and go to state 7
    code_block_region              shift and go to state 15
    proc_block                     shift and go to state 6
    empty                          shift and go to state 8

state 8

    (7) code_block_region -> empty .

    KWENTRY         reduce using rule 7 (code_block_region -> empty .)


state 9

    (8) proc_block -> KWPROC . LBRACKET RBRACKET

    LBRACKET        shift and go to state 16


state 10

    (9) inline_block -> KWINLINE . DIDENT LBRACKET inline_region RBRACKET

    DIDENT          shift and go to state 17


state 11

    (11) data_block -> KWDATA LBRACKET . init_region RBRACKET
    (29) init_region -> . init_stmt init_region
    (30) init_region -> . empty
    (31) init_stmt -> . IDENT COLON TYPE SEMICOLON
    (32) init_stmt -> . IDENT COLON TYPE ASSIGN LITERAL SEMICOLON
    (4) empty -> .

    IDENT           shift and go to state 21
    RBRACKET        reduce using rule 4 (empty -> .)

    init_region                    shift and go to state 18
    init_stmt                      shift and go to state 19
    empty                          shift and go to state 20

state 12

    (2) program -> data_block code_block_region entry_block .

    $end            reduce using rule 2 (program -> data_block code_block_region entry_block .)


state 13

    (10) entry_block -> KWENTRY . LBRACKET RBRACKET

    LBRACKET        shift and go to state 22


state 14

    (5) code_block_region -> proc_block code_block_region .

    KWENTRY         reduce using rule 5 (code_block_region -> proc_block code_block_region .)


state 15

    (6) code_block_region -> inline_block code_block_region .

    KWENTRY         reduce using rule 6 (code_block_region -> inline_block code_block_region .)


state 16

    (8) proc_block -> KWPROC LBRACKET . RBRACKET

    RBRACKET        shift and go to state 23


state 17

    (9) inline_block -> KWINLINE DIDENT . LBRACKET inline_region RBRACKET

    LBRACKET        shift and go to state 24


state 18

    (11) data_block -> KWDATA LBRACKET init_region . RBRACKET

    RBRACKET        shift and go to state 25


state 19

    (29) init_region -> init_stmt . init_region
    (29) init_region -> . init_stmt init_region
    (30) init_region -> . empty
    (31) init_stmt -> . IDENT COLON TYPE SEMICOLON
    (32) init_stmt -> . IDENT COLON TYPE ASSIGN LITERAL SEMICOLON
    (4) empty -> .

    IDENT           shift and go to state 21
    RBRACKET        reduce using rule 4 (empty -> .)

    init_stmt                      shift and go to state 19
    init_region                    shift and go to state 26
    empty                          shift and go to state 20

state 20

    (30) init_region -> empty .

    RBRACKET        reduce using rule 30 (init_region -> empty .)


state 21

    (31) init_stmt -> IDENT . COLON TYPE SEMICOLON
    (32) init_stmt -> IDENT . COLON TYPE ASSIGN LITERAL SEMICOLON

    COLON           shift and go to state 27


state 22

    (10) entry_block -> KWENTRY LBRACKET . RBRACKET

    RBRACKET        shift and go to state 28


state 23

    (8) proc_block -> KWPROC LBRACKET RBRACKET .

    KWPROC          reduce using rule 8 (proc_block -> KWPROC LBRACKET RBRACKET .)
    KWINLINE        reduce using rule 8 (proc_block -> KWPROC LBRACKET RBRACKET .)
    KWENTRY         reduce using rule 8 (proc_block -> KWPROC LBRACKET RBRACKET .)


state 24

    (9) inline_block -> KWINLINE DIDENT LBRACKET . inline_region RBRACKET
    (12) inline_region -> . inline_stmt inline_region
    (13) inline_region -> . empty
    (22) inline_stmt -> . command_statement
    (23) inline_stmt -> . directive_stmt
    (4) empty -> .
    (14) command_statement -> . PLUS
    (15) command_statement -> . MINUS
    (16) command_statement -> . RSQBRACKET
    (17) command_statement -> . LSQBRACKET
    (18) command_statement -> . RPTBRACKET
    (19) command_statement -> . LPTBRACKET
    (20) command_statement -> . POINT
    (21) command_statement -> . COMMA
    (28) directive_stmt -> . DIDENT directive_args

    RBRACKET        reduce using rule 4 (empty -> .)
    PLUS            shift and go to state 35
    MINUS           shift and go to state 36
    RSQBRACKET      shift and go to state 37
    LSQBRACKET      shift and go to state 38
    RPTBRACKET      shift and go to state 39
    LPTBRACKET      shift and go to state 40
    POINT           shift and go to state 41
    COMMA           shift and go to state 42
    DIDENT          shift and go to state 29

    inline_region                  shift and go to state 30
    inline_stmt                    shift and go to state 31
    empty                          shift and go to state 32
    command_statement              shift and go to state 33
    directive_stmt                 shift and go to state 34

state 25

    (11) data_block -> KWDATA LBRACKET init_region RBRACKET .

    KWPROC          reduce using rule 11 (data_block -> KWDATA LBRACKET init_region RBRACKET .)
    KWINLINE        reduce using rule 11 (data_block -> KWDATA LBRACKET init_region RBRACKET .)
    KWENTRY         reduce using rule 11 (data_block -> KWDATA LBRACKET init_region RBRACKET .)
    $end            reduce using rule 11 (data_block -> KWDATA LBRACKET init_region RBRACKET .)


state 26

    (29) init_region -> init_stmt init_region .

    RBRACKET        reduce using rule 29 (init_region -> init_stmt init_region .)


state 27

    (31) init_stmt -> IDENT COLON . TYPE SEMICOLON
    (32) init_stmt -> IDENT COLON . TYPE ASSIGN LITERAL SEMICOLON

    TYPE            shift and go to state 43


state 28

    (10) entry_block -> KWENTRY LBRACKET RBRACKET .

    $end            reduce using rule 10 (entry_block -> KWENTRY LBRACKET RBRACKET .)


state 29

    (28) directive_stmt -> DIDENT . directive_args
    (27) directive_args -> . LPAREN directive_args_list RPAREN

    LPAREN          shift and go to state 45

    directive_args                 shift and go to state 44

state 30

    (9) inline_block -> KWINLINE DIDENT LBRACKET inline_region . RBRACKET

    RBRACKET        shift and go to state 46


state 31

    (12) inline_region -> inline_stmt . inline_region
    (12) inline_region -> . inline_stmt inline_region
    (13) inline_region -> . empty
    (22) inline_stmt -> . command_statement
    (23) inline_stmt -> . directive_stmt
    (4) empty -> .
    (14) command_statement -> . PLUS
    (15) command_statement -> . MINUS
    (16) command_statement -> . RSQBRACKET
    (17) command_statement -> . LSQBRACKET
    (18) command_statement -> . RPTBRACKET
    (19) command_statement -> . LPTBRACKET
    (20) command_statement -> . POINT
    (21) command_statement -> . COMMA
    (28) directive_stmt -> . DIDENT directive_args

    RBRACKET        reduce using rule 4 (empty -> .)
    PLUS            shift and go to state 35
    MINUS           shift and go to state 36
    RSQBRACKET      shift and go to state 37
    LSQBRACKET      shift and go to state 38
    RPTBRACKET      shift and go to state 39
    LPTBRACKET      shift and go to state 40
    POINT           shift and go to state 41
    COMMA           shift and go to state 42
    DIDENT          shift and go to state 29

    inline_stmt                    shift and go to state 31
    inline_region                  shift and go to state 47
    empty                          shift and go to state 32
    command_statement              shift and go to state 33
    directive_stmt                 shift and go to state 34

state 32

    (13) inline_region -> empty .

    RBRACKET        reduce using rule 13 (inline_region -> empty .)


state 33

    (22) inline_stmt -> command_statement .

    PLUS            reduce using rule 22 (inline_stmt -> command_statement .)
    MINUS           reduce using rule 22 (inline_stmt -> command_statement .)
    RSQBRACKET      reduce using rule 22 (inline_stmt -> command_statement .)
    LSQBRACKET      reduce using rule 22 (inline_stmt -> command_statement .)
    RPTBRACKET      reduce using rule 22 (inline_stmt -> command_statement .)
    LPTBRACKET      reduce using rule 22 (inline_stmt -> command_statement .)
    POINT           reduce using rule 22 (inline_stmt -> command_statement .)
    COMMA           reduce using rule 22 (inline_stmt -> command_statement .)
    DIDENT          reduce using rule 22 (inline_stmt -> command_statement .)
    RBRACKET        reduce using rule 22 (inline_stmt -> command_statement .)


state 34

    (23) inline_stmt -> directive_stmt .

    PLUS            reduce using rule 23 (inline_stmt -> directive_stmt .)
    MINUS           reduce using rule 23 (inline_stmt -> directive_stmt .)
    RSQBRACKET      reduce using rule 23 (inline_stmt -> directive_stmt .)
    LSQBRACKET      reduce using rule 23 (inline_stmt -> directive_stmt .)
    RPTBRACKET      reduce using rule 23 (inline_stmt -> directive_stmt .)
    LPTBRACKET      reduce using rule 23 (inline_stmt -> directive_stmt .)
    POINT           reduce using rule 23 (inline_stmt -> directive_stmt .)
    COMMA           reduce using rule 23 (inline_stmt -> directive_stmt .)
    DIDENT          reduce using rule 23 (inline_stmt -> directive_stmt .)
    RBRACKET        reduce using rule 23 (inline_stmt -> directive_stmt .)


state 35

    (14) command_statement -> PLUS .

    PLUS            reduce using rule 14 (command_statement -> PLUS .)
    MINUS           reduce using rule 14 (command_statement -> PLUS .)
    RSQBRACKET      reduce using rule 14 (command_statement -> PLUS .)
    LSQBRACKET      reduce using rule 14 (command_statement -> PLUS .)
    RPTBRACKET      reduce using rule 14 (command_statement -> PLUS .)
    LPTBRACKET      reduce using rule 14 (command_statement -> PLUS .)
    POINT           reduce using rule 14 (command_statement -> PLUS .)
    COMMA           reduce using rule 14 (command_statement -> PLUS .)
    DIDENT          reduce using rule 14 (command_statement -> PLUS .)
    RBRACKET        reduce using rule 14 (command_statement -> PLUS .)


state 36

    (15) command_statement -> MINUS .

    PLUS            reduce using rule 15 (command_statement -> MINUS .)
    MINUS           reduce using rule 15 (command_statement -> MINUS .)
    RSQBRACKET      reduce using rule 15 (command_statement -> MINUS .)
    LSQBRACKET      reduce using rule 15 (command_statement -> MINUS .)
    RPTBRACKET      reduce using rule 15 (command_statement -> MINUS .)
    LPTBRACKET      reduce using rule 15 (command_statement -> MINUS .)
    POINT           reduce using rule 15 (command_statement -> MINUS .)
    COMMA           reduce using rule 15 (command_statement -> MINUS .)
    DIDENT          reduce using rule 15 (command_statement -> MINUS .)
    RBRACKET        reduce using rule 15 (command_statement -> MINUS .)


state 37

    (16) command_statement -> RSQBRACKET .

    PLUS            reduce using rule 16 (command_statement -> RSQBRACKET .)
    MINUS           reduce using rule 16 (command_statement -> RSQBRACKET .)
    RSQBRACKET      reduce using rule 16 (command_statement -> RSQBRACKET .)
    LSQBRACKET      reduce using rule 16 (command_statement -> RSQBRACKET .)
    RPTBRACKET      reduce using rule 16 (command_statement -> RSQBRACKET .)
    LPTBRACKET      reduce using rule 16 (command_statement -> RSQBRACKET .)
    POINT           reduce using rule 16 (command_statement -> RSQBRACKET .)
    COMMA           reduce using rule 16 (command_statement -> RSQBRACKET .)
    DIDENT          reduce using rule 16 (command_statement -> RSQBRACKET .)
    RBRACKET        reduce using rule 16 (command_statement -> RSQBRACKET .)


state 38

    (17) command_statement -> LSQBRACKET .

    PLUS            reduce using rule 17 (command_statement -> LSQBRACKET .)
    MINUS           reduce using rule 17 (command_statement -> LSQBRACKET .)
    RSQBRACKET      reduce using rule 17 (command_statement -> LSQBRACKET .)
    LSQBRACKET      reduce using rule 17 (command_statement -> LSQBRACKET .)
    RPTBRACKET      reduce using rule 17 (command_statement -> LSQBRACKET .)
    LPTBRACKET      reduce using rule 17 (command_statement -> LSQBRACKET .)
    POINT           reduce using rule 17 (command_statement -> LSQBRACKET .)
    COMMA           reduce using rule 17 (command_statement -> LSQBRACKET .)
    DIDENT          reduce using rule 17 (command_statement -> LSQBRACKET .)
    RBRACKET        reduce using rule 17 (command_statement -> LSQBRACKET .)


state 39

    (18) command_statement -> RPTBRACKET .

    PLUS            reduce using rule 18 (command_statement -> RPTBRACKET .)
    MINUS           reduce using rule 18 (command_statement -> RPTBRACKET .)
    RSQBRACKET      reduce using rule 18 (command_statement -> RPTBRACKET .)
    LSQBRACKET      reduce using rule 18 (command_statement -> RPTBRACKET .)
    RPTBRACKET      reduce using rule 18 (command_statement -> RPTBRACKET .)
    LPTBRACKET      reduce using rule 18 (command_statement -> RPTBRACKET .)
    POINT           reduce using rule 18 (command_statement -> RPTBRACKET .)
    COMMA           reduce using rule 18 (command_statement -> RPTBRACKET .)
    DIDENT          reduce using rule 18 (command_statement -> RPTBRACKET .)
    RBRACKET        reduce using rule 18 (command_statement -> RPTBRACKET .)


state 40

    (19) command_statement -> LPTBRACKET .

    PLUS            reduce using rule 19 (command_statement -> LPTBRACKET .)
    MINUS           reduce using rule 19 (command_statement -> LPTBRACKET .)
    RSQBRACKET      reduce using rule 19 (command_statement -> LPTBRACKET .)
    LSQBRACKET      reduce using rule 19 (command_statement -> LPTBRACKET .)
    RPTBRACKET      reduce using rule 19 (command_statement -> LPTBRACKET .)
    LPTBRACKET      reduce using rule 19 (command_statement -> LPTBRACKET .)
    POINT           reduce using rule 19 (command_statement -> LPTBRACKET .)
    COMMA           reduce using rule 19 (command_statement -> LPTBRACKET .)
    DIDENT          reduce using rule 19 (command_statement -> LPTBRACKET .)
    RBRACKET        reduce using rule 19 (command_statement -> LPTBRACKET .)


state 41

    (20) command_statement -> POINT .

    PLUS            reduce using rule 20 (command_statement -> POINT .)
    MINUS           reduce using rule 20 (command_statement -> POINT .)
    RSQBRACKET      reduce using rule 20 (command_statement -> POINT .)
    LSQBRACKET      reduce using rule 20 (command_statement -> POINT .)
    RPTBRACKET      reduce using rule 20 (command_statement -> POINT .)
    LPTBRACKET      reduce using rule 20 (command_statement -> POINT .)
    POINT           reduce using rule 20 (command_statement -> POINT .)
    COMMA           reduce using rule 20 (command_statement -> POINT .)
    DIDENT          reduce using rule 20 (command_statement -> POINT .)
    RBRACKET        reduce using rule 20 (command_statement -> POINT .)


state 42

    (21) command_statement -> COMMA .

    PLUS            reduce using rule 21 (command_statement -> COMMA .)
    MINUS           reduce using rule 21 (command_statement -> COMMA .)
    RSQBRACKET      reduce using rule 21 (command_statement -> COMMA .)
    LSQBRACKET      reduce using rule 21 (command_statement -> COMMA .)
    RPTBRACKET      reduce using rule 21 (command_statement -> COMMA .)
    LPTBRACKET      reduce using rule 21 (command_statement -> COMMA .)
    POINT           reduce using rule 21 (command_statement -> COMMA .)
    COMMA           reduce using rule 21 (command_statement -> COMMA .)
    DIDENT          reduce using rule 21 (command_statement -> COMMA .)
    RBRACKET        reduce using rule 21 (command_statement -> COMMA .)


state 43

    (31) init_stmt -> IDENT COLON TYPE . SEMICOLON
    (32) init_stmt -> IDENT COLON TYPE . ASSIGN LITERAL SEMICOLON

    SEMICOLON       shift and go to state 48
    ASSIGN          shift and go to state 49


state 44

    (28) directive_stmt -> DIDENT directive_args .

    PLUS            reduce using rule 28 (directive_stmt -> DIDENT directive_args .)
    MINUS           reduce using rule 28 (directive_stmt -> DIDENT directive_args .)
    RSQBRACKET      reduce using rule 28 (directive_stmt -> DIDENT directive_args .)
    LSQBRACKET      reduce using rule 28 (directive_stmt -> DIDENT directive_args .)
    RPTBRACKET      reduce using rule 28 (directive_stmt -> DIDENT directive_args .)
    LPTBRACKET      reduce using rule 28 (directive_stmt -> DIDENT directive_args .)
    POINT           reduce using rule 28 (directive_stmt -> DIDENT directive_args .)
    COMMA           reduce using rule 28 (directive_stmt -> DIDENT directive_args .)
    DIDENT          reduce using rule 28 (directive_stmt -> DIDENT directive_args .)
    RBRACKET        reduce using rule 28 (directive_stmt -> DIDENT directive_args .)


state 45

    (27) directive_args -> LPAREN . directive_args_list RPAREN
    (24) directive_args_list -> . IIDENT
    (25) directive_args_list -> . IIDENT COMMA directive_args_list
    (26) directive_args_list -> . empty
    (4) empty -> .

    IIDENT          shift and go to state 51
    RPAREN          reduce using rule 4 (empty -> .)

    directive_args_list            shift and go to state 50
    empty                          shift and go to state 52

state 46

    (9) inline_block -> KWINLINE DIDENT LBRACKET inline_region RBRACKET .

    KWPROC          reduce using rule 9 (inline_block -> KWINLINE DIDENT LBRACKET inline_region RBRACKET .)
    KWINLINE        reduce using rule 9 (inline_block -> KWINLINE DIDENT LBRACKET inline_region RBRACKET .)
    KWENTRY         reduce using rule 9 (inline_block -> KWINLINE DIDENT LBRACKET inline_region RBRACKET .)


state 47

    (12) inline_region -> inline_stmt inline_region .

    RBRACKET        reduce using rule 12 (inline_region -> inline_stmt inline_region .)


state 48

    (31) init_stmt -> IDENT COLON TYPE SEMICOLON .

    IDENT           reduce using rule 31 (init_stmt -> IDENT COLON TYPE SEMICOLON .)
    RBRACKET        reduce using rule 31 (init_stmt -> IDENT COLON TYPE SEMICOLON .)


state 49

    (32) init_stmt -> IDENT COLON TYPE ASSIGN . LITERAL SEMICOLON

    LITERAL         shift and go to state 53


state 50

    (27) directive_args -> LPAREN directive_args_list . RPAREN

    RPAREN          shift and go to state 54


state 51

    (24) directive_args_list -> IIDENT .
    (25) directive_args_list -> IIDENT . COMMA directive_args_list

    RPAREN          reduce using rule 24 (directive_args_list -> IIDENT .)
    COMMA           shift and go to state 55


state 52

    (26) directive_args_list -> empty .

    RPAREN          reduce using rule 26 (directive_args_list -> empty .)


state 53

    (32) init_stmt -> IDENT COLON TYPE ASSIGN LITERAL . SEMICOLON

    SEMICOLON       shift and go to state 56


state 54

    (27) directive_args -> LPAREN directive_args_list RPAREN .

    PLUS            reduce using rule 27 (directive_args -> LPAREN directive_args_list RPAREN .)
    MINUS           reduce using rule 27 (directive_args -> LPAREN directive_args_list RPAREN .)
    RSQBRACKET      reduce using rule 27 (directive_args -> LPAREN directive_args_list RPAREN .)
    LSQBRACKET      reduce using rule 27 (directive_args -> LPAREN directive_args_list RPAREN .)
    RPTBRACKET      reduce using rule 27 (directive_args -> LPAREN directive_args_list RPAREN .)
    LPTBRACKET      reduce using rule 27 (directive_args -> LPAREN directive_args_list RPAREN .)
    POINT           reduce using rule 27 (directive_args -> LPAREN directive_args_list RPAREN .)
    COMMA           reduce using rule 27 (directive_args -> LPAREN directive_args_list RPAREN .)
    DIDENT          reduce using rule 27 (directive_args -> LPAREN directive_args_list RPAREN .)
    RBRACKET        reduce using rule 27 (directive_args -> LPAREN directive_args_list RPAREN .)


state 55

    (25) directive_args_list -> IIDENT COMMA . directive_args_list
    (24) directive_args_list -> . IIDENT
    (25) directive_args_list -> . IIDENT COMMA directive_args_list
    (26) directive_args_list -> . empty
    (4) empty -> .

    IIDENT          shift and go to state 51
    RPAREN          reduce using rule 4 (empty -> .)

    directive_args_list            shift and go to state 57
    empty                          shift and go to state 52

state 56

    (32) init_stmt -> IDENT COLON TYPE ASSIGN LITERAL SEMICOLON .

    IDENT           reduce using rule 32 (init_stmt -> IDENT COLON TYPE ASSIGN LITERAL SEMICOLON .)
    RBRACKET        reduce using rule 32 (init_stmt -> IDENT COLON TYPE ASSIGN LITERAL SEMICOLON .)


state 57

    (25) directive_args_list -> IIDENT COMMA directive_args_list .

    RPAREN          reduce using rule 25 (directive_args_list -> IIDENT COMMA directive_args_list .)

